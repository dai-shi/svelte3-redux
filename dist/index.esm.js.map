{"version":3,"file":"index.esm.js","sources":["../src/bind.ts","../src/bindTracked.ts"],"sourcesContent":["import { Action as BaseAction, Store } from 'redux';\nimport { readable } from 'svelte/store';\n\n/**\n * Take Redux store and return a global state for Svelte.\n * @example\n * import { createStore } from 'redux';\n * import { bind } from 'svelte3-redux';\n *\n * const store = createStore(reducer);\n * export default bind(store);\n */\nexport const bind = <State, Action extends BaseAction>(store: Store<State, Action>) => {\n  const state = readable(store.getState(), (set) => {\n    const unsubscribe = store.subscribe(() => {\n      set(store.getState());\n    });\n    return unsubscribe;\n  });\n  return {\n    subscribe: state.subscribe,\n    dispatch: store.dispatch,\n  };\n};\n","import { Action as BaseAction, Store } from 'redux';\nimport { readable } from 'svelte/store';\n\nimport { createDeepProxy, isDeepChanged } from 'proxy-compare';\n\n/**\n * Take Redux store and return a global state for Svelte.\n * With state usage tracking.\n * @example\n * import { createStore } from 'redux';\n * import { bindTracked } from 'svelte3-redux';\n *\n * const store = createStore(reducer);\n * export default () => bindTracked(store);\n */\nexport const bindTracked = <State, Action extends BaseAction>(store: Store<State, Action>) => {\n  const proxyCache = new WeakMap();\n  let lastTracked: {\n    state: State;\n    affected: WeakMap<object, Set<string | number | symbol>>;\n    cache: WeakMap<object, unknown>;\n  };\n  const wrapState = (state: State) => {\n    const affected = new WeakMap();\n    const wrapped = createDeepProxy(state, affected, proxyCache);\n    lastTracked = {\n      state,\n      affected,\n      cache: new WeakMap(),\n    };\n    return wrapped;\n  };\n  const initialState = wrapState(store.getState());\n  const { subscribe } = readable(initialState, (set) => {\n    const unsubscribe = store.subscribe(() => {\n      const nextState = store.getState();\n      if (lastTracked.state === nextState\n        || !isDeepChanged(\n          lastTracked.state,\n          nextState,\n          lastTracked.affected,\n          lastTracked.cache,\n        )) {\n        // not changed\n        return;\n      }\n      set(wrapState(nextState));\n    });\n    return unsubscribe;\n  });\n  return {\n    subscribe,\n    dispatch: store.dispatch,\n  };\n};\n"],"names":["bind","store","subscribe","readable","getState","set","dispatch","bindTracked","lastTracked","proxyCache","WeakMap","wrapState","state","affected","wrapped","createDeepProxy","cache","initialState","nextState","isDeepChanged"],"mappings":"2GAYaA,IAAAA,EAAO,SAAmCC,GAOrD,MAAO,CACLC,UAPYC,EAASF,EAAMG,WAAY,SAACC,GAIxC,OAHoBJ,EAAMC,UAAU,WAClCG,EAAIJ,EAAMG,gBAKKF,UACjBI,SAAUL,EAAMK,WCNPC,EAAc,SAAmCN,GAC5D,IACIO,EADEC,EAAa,IAAIC,QAMjBC,EAAY,SAACC,GACjB,IAAMC,EAAW,IAAIH,QACfI,EAAUC,EAAgBH,EAAOC,EAAUJ,GAMjD,OALAD,EAAc,CACZI,MAAAA,EACAC,SAAAA,EACAG,MAAO,IAAIN,SAENI,GAEHG,EAAeN,EAAUV,EAAMG,YAkBrC,MAAO,CACLF,UAlBoBC,EAASc,EAAc,SAACZ,GAe5C,OAdoBJ,EAAMC,UAAU,WAClC,IAAMgB,EAAYjB,EAAMG,WACpBI,EAAYI,QAAUM,GACpBC,EACFX,EAAYI,MACZM,EACAV,EAAYK,SACZL,EAAYQ,QAKhBX,EAAIM,EAAUO,QAbVhB,UAmBNI,SAAUL,EAAMK"}